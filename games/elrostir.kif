;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ELROSTIR (from Ludi system)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Roles
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role White)
(role Black)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Base & Input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;indexes
(index 1) (index 2) (index 3) (index 4) (index 5)

;;Grid
(<= (base (cell ?x ?y b)) (index ?x) (index ?y))
(<= (base (cell ?x ?y x)) (index ?x) (index ?y))
(<= (base (cell ?x ?y o)) (index ?x) (index ?y))

;;Uses control and role
(<= (base (control ?p)) (role ?p))

;;Inputs: mark, noop
(<= (input ?p (mark ?x ?y)) (index ?x) (index ?y) (role ?p))
(<= (input ?p noop) (role ?p))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initial State
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(init (cell 1 1 b)) (init (cell 2 1 b)) (init (cell 3 1 b)) (init (cell 4 1 b)) (init (cell 5 1 b))
(init (cell 1 2 b)) (init (cell 2 2 b)) (init (cell 3 2 b)) (init (cell 4 2 b)) (init (cell 5 2 b))
(init (cell 1 3 b)) (init (cell 2 3 b)) (init (cell 3 3 b)) (init (cell 4 3 b)) (init (cell 5 3 b))
(init (cell 1 4 b)) (init (cell 2 4 b)) (init (cell 3 4 b)) (init (cell 4 4 b)) (init (cell 5 4 b))
(init (cell 1 5 b)) (init (cell 2 5 b)) (init (cell 3 5 b)) (init (cell 4 5 b)) (init (cell 5 5 b))
(init (control White))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dynamic Components
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Cell

;;If White marks a cell, it should be blank
(<= (next (cell ?m ?n x))
(does White (mark ?m ?n))
(true (cell ?m ?n b)))

;;If Black marks a cell, it should be blank
(<= (next (cell ?m ?n o))
(does Black (mark ?m ?n))
(true (cell ?m ?n b)))

;;If a cell is marked, is should not be marked blank
(<= (next (cell ?m ?n ?w))
(true (cell ?m ?n ?w))
(distinct ?w b))

;;If a cell is marked, other cells not yet marked should stay unmarked
(<= (next (cell ?m ?n b))
(does ?w (mark ?j ?k))
(true (cell ?m ?n b))
(or (distinct ?m ?j) (distinct ?n ?k)))

;;Turn Order
(<= (next (control White))
(true (control Black)))

(<= (next (control Black))
(true (control White)))

;;;;FUNCTIONS:
;;Enumerates combinations:
(<= (row ?m ?x)
(true (cell ?m 1 ?x))
(true (cell ?m 2 ?x))
(true (cell ?m 3 ?x)))

(<= (column ?n ?x)
(true (cell 1 ?n ?x))
(true (cell 2 ?n ?x))
(true (cell 3 ?n ?x)))

(<= (diagonal ?x)
(true (cell 1 1 ?x))
(true (cell 2 2 ?x))
(true (cell 3 3 ?x)))

(<= (diagonal ?x)
(true (cell 1 3 ?x))
(true (cell 2 2 ?x))
(true (cell 3 1 ?x)))


(<= (line ?x) (row ?m ?x))
(<= (line ?x) (column ?m ?x))
(<= (line ?x) (diagonal ?x))


(<= open
(true (cell ?m ?n b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;You can only mark if it is your turn
(<= (legal ?w (mark ?x ?y))
(true (cell ?x ?y b))
(true (control ?w)))

;;If it is Black's turn, White can only noop
(<= (legal White noop)
(true (control Black)))

;;If it is White's turn, Black can only noop
(<= (legal Black noop)
(true (control White)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal White 100)
(line x))

(<= (goal White 50)
(not (line x))
(not (line o))
(not open))

(<= (goal White 0)
(line o))

(<= (goal Black 100)
(line o))

(<= (goal Black 50)
(not (line x))
(not (line o))
(not open))

(<= (goal Black 0)
(line x))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal
(line x))

(<= terminal
(line o))

(<= terminal
(not open))
